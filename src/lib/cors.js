import config from './config';

export function allowCors(handler) {
  return async (req, res) => {
    // Obter valores da configura√ß√£o centralizada
    const isDevelopment = config.system.isDevelopment;
    const allowedOrigins = config.cors.allowedOrigins;
    const allowAnyOriginInDev = config.cors.allowAnyOriginInDev;
    const allowPostman = config.cors.allowPostman;
    
    const origin = req.headers.origin || "";
    const userAgent = req.headers["user-agent"] || "";
    const method = req.method || "UNKNOWN";
    const path = req.url || "UNKNOWN";

    // Log diagn√≥stico para depura√ß√£o
    console.log(`[CORS] üîç Recebida requisi√ß√£o: ${method} ${path}`);
    console.log(`[CORS] üîç Origem: "${origin}"`);
    console.log(`[CORS] üîç Origens permitidas:`, allowedOrigins);
    console.log(`[CORS] üîç Em modo desenvolvimento:`, isDevelopment);
    console.log(`[CORS] üîç Headers recebidos:`, Object.keys(req.headers).join(', '));

    // Verificar se √© uma requisi√ß√£o do Postman
    const isPostmanRequest = userAgent.includes("Postman");
    
    // Verificar solicita√ß√µes sem origem (pode ser um bot ou um teste de seguran√ßa)
    if (!origin && !isPostmanRequest) {
      // Em desenvolvimento, podemos permitir solicita√ß√µes sem origem para facilitar testes
      if (isDevelopment) {
        console.warn(`[CORS] ‚ö†Ô∏è Solicita√ß√£o sem origem permitida em DEV: ${method} ${path}`);
      } else {
        // Em produ√ß√£o, verificar se √© uma chamada de API
        if (req.headers.authorization && (path.includes('/api/admin') || path.includes('/api/verify'))) {
          console.log(`[CORS] ‚úÖ Chamada de API autenticada sem origem √© permitida: ${method} ${path}`);
        } else {
          // Em produ√ß√£o, logue e bloqueie solicita√ß√µes sem origem
          console.warn(`[CORS] üö´ Solicita√ß√£o sem origem bloqueada: ${method} ${path}`);
          return res.status(403).json({ error: "Acesso negado: Origem n√£o especificada" });
        }
      }
    }

    // Verifica se a origem est√° permitida
    const isOriginAllowed = allowedOrigins.includes(origin);
    
    // IMPORTANTE: Como estamos usando credentials (cookies, auth headers),
    // n√£o podemos usar Access-Control-Allow-Origin: * mesmo em desenvolvimento
    // Em vez disso, sempre devemos especificar a origem exata
    
    // Em desenvolvimento, podemos ser mais flex√≠veis
    if (isDevelopment) {
      // Em desenvolvimento, permitir origens espec√≠ficas se configurado
      if (allowAnyOriginInDev && origin) {
        console.warn(`[CORS] ‚ö†Ô∏è Permitindo origem em DEV: ${origin}`);
        res.setHeader("Access-Control-Allow-Origin", origin);
      } else if (isOriginAllowed || (allowPostman && isPostmanRequest)) {
        console.log(`[CORS] ‚úÖ Origem permitida em DEV: ${origin}`);
        res.setHeader("Access-Control-Allow-Origin", origin);
      } else {
        console.warn(`[CORS] üö´ Origem bloqueada em DEV: ${origin}`);
        return res.status(403).json({ error: "Acesso negado: Origem n√£o autorizada" });
      }
    } else {
      // Em produ√ß√£o, ser mais rigoroso
      if (isOriginAllowed || (allowPostman && isPostmanRequest)) {
        console.log(`[CORS] ‚úÖ Origem permitida: ${origin}`);
        res.setHeader("Access-Control-Allow-Origin", origin);
      } else if (!origin && req.headers.authorization) {
        // Para solicita√ß√µes de API sem origem, mas com autentica√ß√£o, podemos permitir
        console.log(`[CORS] ‚úÖ Requisi√ß√£o autenticada sem origem permitida`);
      } else {
        console.warn(`[CORS] üö´ Origem bloqueada: ${origin}`);
        return res.status(403).json({ error: "Acesso negado: Origem n√£o autorizada" });
      }
    }

    // Definir corretamente os headers CORS
    res.setHeader("Access-Control-Allow-Credentials", "true"); // Permite cookies e sess√µes autenticadas
    res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS, POST, PUT, DELETE, PATCH");
    res.setHeader(
      "Access-Control-Allow-Headers",
      "X-Requested-With, Content-Type, Authorization, Cookie, Set-Cookie, Accept"
    );
    
    // Configurar o tempo de cache para preflight em produ√ß√£o (10 minutos)
    if (!isDevelopment && req.method === "OPTIONS") {
      res.setHeader("Access-Control-Max-Age", "600");
    }

    // Responde imediatamente a requisi√ß√µes OPTIONS (Preflight)
    if (req.method === "OPTIONS") {
      return res.status(204).end();
    }

    return handler(req, res);
  };
}